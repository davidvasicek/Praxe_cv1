// constants won't change. They're used here to set pin numbers:
const int buttonPin = 9;    // the number of the pushbutton pin
const int ledPin = 13;      // the number of the LED pin

// Variables will change:
int ledState = HIGH;         // the current state of the output pin
int buttonState;             // the current reading from the input pin
int lastButtonState = LOW;   // the previous reading from the input pin

// the following variables are unsigned longs because the time, measured in
// milliseconds, will quickly become a bigger number than can be stored in an int.
unsigned long lastDebounceTime = 0;  // the last time the output pin was toggled
unsigned long debounceDelay = 50;    // the debounce time; increase if the output flickers

uint8_t segmentA = 2;
uint8_t segmentB = 3;
uint8_t segmentC = 4;
uint8_t segmentD = 5;
uint8_t segmentE = 6;
uint8_t segmentF = 7;
uint8_t segmentG = 8;

void setup() {
  pinMode(buttonPin, INPUT);
  pinMode(ledPin, OUTPUT);

  pinMode(segmentA, OUTPUT);
  pinMode(segmentB, OUTPUT);
  pinMode(segmentC, OUTPUT);
  pinMode(segmentD, OUTPUT);
  pinMode(segmentE, OUTPUT);
  pinMode(segmentF, OUTPUT);
  pinMode(segmentG, OUTPUT);



  // set initial LED state
  digitalWrite(ledPin, ledState);
}

void loop() {
  // read the state of the switch into a local variable:
  int reading = digitalRead(buttonPin);

  // check to see if you just pressed the button
  // (i.e. the input went from LOW to HIGH), and you've waited long enough
  // since the last press to ignore any noise:

  // If the switch changed, due to noise or pressing:
  if (reading != lastButtonState) {
    // reset the debouncing timer
    lastDebounceTime = millis();
  }

  if ((millis() - lastDebounceTime) > debounceDelay) {
    // whatever the reading is at, it's been there for longer than the debounce
    // delay, so take it as the actual current state:

    // if the button state has changed:
    if (reading != buttonState) {
      buttonState = reading;

      // only toggle the LED if the new button state is HIGH
      if (buttonState == HIGH) {
        ledState = !ledState;

        // tadz se neco stane pri stisku




        for(int i=0; i<5; i++){
  
        for(int i=0; i<5; i++){
  
          animace(i);
          delay(50);
          
        }
          
        }

        rozsvitCislo(random(0,9));



      //  for(int i=0; i<10; i++){
  
          //rozsvitCislo(random(0,9));
       //   delay(1000);
          
       // }

        
      }
    }
  }

  // set the LED:
  digitalWrite(ledPin, ledState);

  // save the reading. Next time through the loop, it'll be the lastButtonState:
  lastButtonState = reading;
}


void rozsvitCislo(int cislo){

  switch(cislo){

    case 0:   digitalWrite(segmentA, LOW);
              digitalWrite(segmentB, LOW);
              digitalWrite(segmentC, LOW);
              digitalWrite(segmentD, LOW);
              digitalWrite(segmentE, LOW);
              digitalWrite(segmentF, LOW);
              digitalWrite(segmentG, HIGH);
              break;

    case 1:   digitalWrite(segmentA, HIGH);
              digitalWrite(segmentB, LOW);
              digitalWrite(segmentC, LOW);
              digitalWrite(segmentD, HIGH);
              digitalWrite(segmentE, HIGH);
              digitalWrite(segmentF, HIGH);
              digitalWrite(segmentG, HIGH);
              break;

    case 2:   digitalWrite(segmentA, LOW);
              digitalWrite(segmentB, LOW);
              digitalWrite(segmentC, HIGH);
              digitalWrite(segmentD, LOW);
              digitalWrite(segmentE, LOW);
              digitalWrite(segmentF, HIGH);
              digitalWrite(segmentG, LOW);
              break;

    case 3:   digitalWrite(segmentA, LOW);
              digitalWrite(segmentB, LOW);
              digitalWrite(segmentC, LOW);
              digitalWrite(segmentD, LOW);
              digitalWrite(segmentE, HIGH);
              digitalWrite(segmentF, HIGH);
              digitalWrite(segmentG, LOW);
              break;

    case 4:   digitalWrite(segmentA, HIGH);
              digitalWrite(segmentB, LOW);
              digitalWrite(segmentC, LOW);
              digitalWrite(segmentD, HIGH);
              digitalWrite(segmentE, HIGH);
              digitalWrite(segmentF, LOW);
              digitalWrite(segmentG, LOW);
              break;

    case 5:   digitalWrite(segmentA, LOW);
              digitalWrite(segmentB, HIGH);
              digitalWrite(segmentC, LOW);
              digitalWrite(segmentD, LOW);
              digitalWrite(segmentE, HIGH);
              digitalWrite(segmentF, LOW);
              digitalWrite(segmentG, LOW);
              break;

    case 6:   digitalWrite(segmentA, LOW);
              digitalWrite(segmentB, HIGH);
              digitalWrite(segmentC, LOW);
              digitalWrite(segmentD, LOW);
              digitalWrite(segmentE, LOW);
              digitalWrite(segmentF, LOW);
              digitalWrite(segmentG, LOW);
              break;

    case 7:   digitalWrite(segmentA, LOW);
              digitalWrite(segmentB, LOW);
              digitalWrite(segmentC, LOW);
              digitalWrite(segmentD, HIGH);
              digitalWrite(segmentE, HIGH);
              digitalWrite(segmentF, HIGH);
              digitalWrite(segmentG, HIGH);
              break;

    case 8:   digitalWrite(segmentA, LOW);
              digitalWrite(segmentB, LOW);
              digitalWrite(segmentC, LOW);
              digitalWrite(segmentD, LOW);
              digitalWrite(segmentE, LOW);
              digitalWrite(segmentF, LOW);
              digitalWrite(segmentG, LOW);
              break;
              
    case 9:   digitalWrite(segmentA, LOW);
              digitalWrite(segmentB, LOW);
              digitalWrite(segmentC, LOW);
              digitalWrite(segmentD, LOW);
              digitalWrite(segmentE, HIGH);
              digitalWrite(segmentF, LOW);
              digitalWrite(segmentG, LOW);
              break;
  }


}








void animace(int cislo){

  switch(cislo){

    case 0:   digitalWrite(segmentA, LOW);
              digitalWrite(segmentB, HIGH);
              digitalWrite(segmentC, HIGH);
              digitalWrite(segmentD, HIGH);
              digitalWrite(segmentE, HIGH);
              digitalWrite(segmentF, HIGH);
              digitalWrite(segmentG, HIGH);
              break;

    case 1:   digitalWrite(segmentA, HIGH);
              digitalWrite(segmentB, LOW);
              digitalWrite(segmentC, HIGH);
              digitalWrite(segmentD, HIGH);
              digitalWrite(segmentE, HIGH);
              digitalWrite(segmentF, HIGH);
              digitalWrite(segmentG, HIGH);
              break;

    case 2:   digitalWrite(segmentA, HIGH);
              digitalWrite(segmentB, HIGH);
              digitalWrite(segmentC, LOW);
              digitalWrite(segmentD, HIGH);
              digitalWrite(segmentE, HIGH);
              digitalWrite(segmentF, HIGH);
              digitalWrite(segmentG, HIGH);
              break;

    case 3:   digitalWrite(segmentA, HIGH);
              digitalWrite(segmentB, HIGH);
              digitalWrite(segmentC, HIGH);
              digitalWrite(segmentD, LOW);
              digitalWrite(segmentE, HIGH);
              digitalWrite(segmentF, HIGH);
              digitalWrite(segmentG, HIGH);
              break;

    case 4:   digitalWrite(segmentA, HIGH);
              digitalWrite(segmentB, HIGH);
              digitalWrite(segmentC, HIGH);
              digitalWrite(segmentD, HIGH);
              digitalWrite(segmentE, LOW);
              digitalWrite(segmentF, HIGH);
              digitalWrite(segmentG, HIGH);
              break;

    case 5:   digitalWrite(segmentA, HIGH);
              digitalWrite(segmentB, HIGH);
              digitalWrite(segmentC, HIGH);
              digitalWrite(segmentD, HIGH);
              digitalWrite(segmentE, HIGH);
              digitalWrite(segmentF, LOW);
              digitalWrite(segmentG, HIGH);
              break;

  
  }


}
